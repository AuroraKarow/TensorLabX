#pragma once
#ifndef __NEUNET_NS__
#define __NEUNET_NS__

#define LAYER_BEGIN         namespace neunet { namespace layer {
#define LAYER_END           } }

#define NEUNET_SIGMOID      0x0001
#define NEUNET_RELU         0x0002
#define NEUNET_ARELU        0x0003
#define NEUNET_ARELU_LOSS   0x0004
#define NEUNET_SOFTMAX      0x0005

// Activation function
#define NEUNET_LAYER_ACT    0x0000
// Padding & cropping
#define NEUNET_LAYER_PC     0x0001
// Flat
#define NEUNET_LAYER_FLAT   0x0002
// Fully connection
#define NEUNET_LAYER_FC     0x0003
// Convolution
#define NEUNET_LAYER_CONV   0x0004
// Pooling
#define NEUNET_LAYER_POOL   0x0005
// BN
#define NEUNET_LAYER_BN     0x0006
// Bias
#define NEUNET_LAYER_BIAS   0x0007

#include "async"
#include "conv"
#include "bn"

// layer type

LAYER_BEGIN

// polymorphic pointer
typedef std::shared_ptr<Layer>  NetLayerPtr;
// activation function
typedef LayerAct<long double>   NetLayerAct;
// BN
typedef LayerBN<long double>    NetLayerBN;
// convolution
typedef LayerConv<long double>  NetLayerConv;
// fully connection
typedef LayerFC<long double>    NetLayerFC;
// bias
typedef LayerBias<long double>  NetLayerBias;
// padding & cropping
typedef LayerPC                 NetLayerPC;
// pooling
typedef LayerPool               NetLayerPool;
// transform
typedef LayerFlat               NetLayerFlat;

LAYER_END

/* network status code */
// train
#define NEUNET_STAT_NRM     0x0000
// deduce
#define NEUNET_STAT_END     0x0001
#define NEUNET_STAT_ERR     0x0002

// layer verification

#define neunet_layer_type_v = std::enable_if_t<\
                            std::is_same_v<LayerType, neunet::layer::NetLayerAct> || \
                            std::is_same_v<LayerType, neunet::layer::NetLayerBN> || \
                            std::is_same_v<LayerType, neunet::layer::NetLayerConv> || \
                            std::is_same_v<LayerType, neunet::layer::NetLayerFC> || \
                            std::is_same_v<LayerType, neunet::layer::NetLayerPC> || \
                            std::is_same_v<LayerType, neunet::layer::NetLayerPool> || \
                            std::is_same_v<LayerType, neunet::layer::NetLayerFlat> || \
                            std::is_same_v<LayerType, neunet::layer::NetLayerBias>>
#define neunet_layer_cast   std::dynamic_pointer_cast

#include "net_chrono"
#include "neunet.hpp"

#endif